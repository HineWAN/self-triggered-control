#!/usr/bin/env python3

import matplotlib.pyplot as plt
from control.models.rigid_body import RigidBody
from control.controller import Controller

INITIAL_CONDITIONS = [1.0, 2.0, 3.0]
T_FINAL = 5.0

if __name__ == "__main__":
    # construct JetEngine class
    print("Constructing jet engine model.")
    model = RigidBody(INITIAL_CONDITIONS)

    print ("Constructing periodic controller.")
    controller = Controller(model, model.calculateCommand)

    print("Simulating...")
    # get the periodic response
    t_periodic, r_periodic = controller.execute(T_FINAL, model.periodicCondition)

    # get the self-triggered response
    t_trigger, r_trigger = controller.execute(T_FINAL, model.triggerCondition)

    # also get the analog "perfect world" respone
    t_perfect, r_perfect = model.analogResponse(T_FINAL, INITIAL_CONDITIONS, t_periodic)

    # plot the response
    plt.plot(t_perfect, r_perfect[0,:], 'b')
    plt.plot(t_perfect, r_perfect[1,:], 'r')
    plt.plot(t_perfect, r_perfect[2,:], 'k')
    plt.plot(t_periodic, r_periodic[:, 0], 'b*', markersize = 1)
    plt.plot(t_periodic, r_periodic[:, 1], 'r*', markersize = 1)
    plt.plot(t_periodic, r_periodic[:, 2], 'k*', markersize = 1)
    plt.plot(t_trigger, r_trigger[:, 0], 'b+', markersize = 3)
    plt.plot(t_trigger, r_trigger[:, 1], 'r+', markersize = 3)
    plt.plot(t_trigger, r_trigger[:, 2], 'k+', markersize = 3)
    plt.xlabel("Time (s)")
    plt.ylabel("State")
    plt.legend(["x1 (perfect)", "x2 (perfect)", "x3 (perfect)", "x1 (periodic)", "x2 (periodic)", "x3 (periodic)", "x1 (trigger)", "x2 (trigger)", "x3 (trigger)"])
    plt.grid(True)
    plt.show()